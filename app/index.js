// index.js
import { Client, GatewayIntentBits, REST, Routes, SlashCommandBuilder } from "npm:discord.js";
const kv = await Deno.openKv();

// ====== Áí∞Â¢ÉÂ§âÊï∞ ======
const DISCORD_TOKEN = Deno.env.get("TOKEN");
const CLIENT_ID = Deno.env.get("CLIENT_ID");

if (!DISCORD_TOKEN || !CLIENT_ID) {
  console.error("‚ùå DISCORD_TOKEN „Åæ„Åü„ÅØ CLIENT_ID „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì");
  Deno.exit(1);
}

// ====== „Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„ÉâÂÆöÁæ©Ôºà„Ç∞„É≠„Éº„Éê„É´„ÅÆ„ÅøÔºâ ======
const commands = [
  new SlashCommandBuilder()
    .setName("dps")
    .setDescription("Ëá™ÂàÜ„ÅÆDPS„ÇíÁôªÈå≤„Åó„Åæ„ÅôÔºà‰æã: /dps 700 udÔºâ")
    .addNumberOption(option =>
      option.setName("value").setDescription("DPS„ÅÆÊï∞ÂÄ§").setRequired(true)
    )
    .addStringOption(option =>
      option.setName("unit").setDescription("Âçò‰ΩçÔºà‰æã: ud, qd, kdÔºâ").setRequired(true)
    ),

  new SlashCommandBuilder()
    .setName("ranking")
    .setDescription("„Åì„ÅÆ„Çµ„Éº„Éê„Éº„ÅÆDPS„É©„É≥„Ç≠„É≥„Ç∞„ÇíË°®Á§∫„Åó„Åæ„Åô"),
].map(c => c.toJSON());

// ====== „Ç≥„Éû„É≥„ÉâÁôªÈå≤ÔºàÊó¢Â≠ò„Çí‰∏äÊõ∏„ÅçÔºâ ======
const rest = new REST({ version: "10" }).setToken(DISCORD_TOKEN);
try {
  console.log("üì° „Ç∞„É≠„Éº„Éê„É´„Ç≥„Éû„É≥„ÉâÁôªÈå≤‰∏≠...");
  await rest.put(Routes.applicationCommands(CLIENT_ID), { body: commands });
  console.log("‚úÖ „Ç≥„Éû„É≥„ÉâÁôªÈå≤ÂÆå‰∫ÜÔºà„Ç∞„É≠„Éº„Éê„É´Ôºâ");
} catch (err) {
  console.error("‚ùå „Ç≥„Éû„É≥„ÉâÁôªÈå≤Â§±Êïó:", err);
}

// ====== BotËµ∑Âãï ======
const client = new Client({ intents: [GatewayIntentBits.Guilds] });

client.once("ready", () => {
  console.log(`ü§ñ „É≠„Ç∞„Ç§„É≥ÊàêÂäü: ${client.user.tag}`);
});

// ====== DPS‰øùÂ≠ò ======
async function saveUserDps(guildId, userId, value, unit) {
  await kv.set(["dps", guildId, userId], { value, unit });
}

// ====== DPSÂèñÂæó ======
async function getAllDps(guildId) {
  const list = [];
  for await (const entry of kv.list({ prefix: ["dps", guildId] })) {
    list.push({ userId: entry.key[2], ...entry.value });
  }
  return list;
}

// ====== „Ç≥„Éû„É≥„ÉâÂá¶ÁêÜ ======
client.on("interactionCreate", async interaction => {
  if (!interaction.isChatInputCommand()) return;

  const guildId = interaction.guildId;
  const userId = interaction.user.id;

  if (interaction.commandName === "dps") {
    const value = interaction.options.getNumber("value");
    const unit = interaction.options.getString("unit");
    await saveUserDps(guildId, userId, value, unit);
    await interaction.reply(`‚úÖ DPS„ÇíÁôªÈå≤„Åó„Åæ„Åó„Åü: **${value} ${unit}**`);
  }

  if (interaction.commandName === "ranking") {
    const allDps = await getAllDps(guildId);
    if (allDps.length === 0) {
      await interaction.reply("‚ö†Ô∏è „Åæ„Å†DPS„ÅåÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì");
      return;
    }

    // „ÇΩ„Éº„Éà
    allDps.sort((a, b) => b.value - a.value);

    // Ë°®Á§∫
    const ranking = allDps
      .map((u, i) => `**${i + 1}‰Ωç** <@${u.userId}> ‚Äî ${u.value} ${u.unit}`)
      .join("\n");

    await interaction.reply(`üèÜ **${interaction.guild.name} DPS„É©„É≥„Ç≠„É≥„Ç∞**\n${ranking}`);
  }
});

client.login(DISCORD_TOKEN);




Deno.cron("Continuous Request", "*/2 * * * *", () => {
    console.log("running...");
});

